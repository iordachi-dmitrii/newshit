# VideoVault Production - Docker Compose
version: '3.8'

services:
  # Frontend - Nginx serving static files
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    ports:
      - "80:80"
      - "443:443"
    environment:
      - API_URL=${API_URL:-http://api:8000}
    depends_on:
      - api
    restart: unless-stopped
    labels:
      - "com.videovault.service=frontend"
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro  # SSL certificates

  # Backend API
  api:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    expose:
      - "8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - CORS_ORIGINS=${CORS_ORIGINS:-https://yourdomain.com}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-524288000}
      - CLEANUP_AFTER_HOURS=${CLEANUP_AFTER_HOURS:-24}
      - API_WORKERS=${API_WORKERS:-4}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - downloads_data:/app/downloads
    depends_on:
      - redis
    restart: unless-stopped
    labels:
      - "com.videovault.service=api"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for job tracking and caching
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    labels:
      - "com.videovault.service=redis"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles: ["monitoring"]

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    profiles: ["monitoring"]

volumes:
  downloads_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: videovault_network